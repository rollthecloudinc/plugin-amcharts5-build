{"version":3,"file":"6481.js","mappings":"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","sources":["./projects/plugin/src/app/json-chart-editor.component.ts","./projects/plugin/src/app/json-chart-editor.component.html","./projects/plugin/src/app/json-chart-ref.component.ts","./projects/plugin/src/app/json-chart-ref.component.html"],"sourcesContent":["import { Component, OnInit, forwardRef, inject } from \"@angular/core\";\nimport { AbstractControl, FormArray, FormControl, FormGroup, NG_VALIDATORS, NG_VALUE_ACCESSOR, UntypedFormArray, UntypedFormControl, UntypedFormGroup, Validators } from \"@angular/forms\";\nimport { MAT_LEGACY_DIALOG_DATA as MAT_DIALOG_DATA, MatLegacyDialogRef as MatDialogRef } from '@angular/material/legacy-dialog';\nimport { AttributeTypes, AttributeSerializerService } from \"@rollthecloudinc/attributes\";\nimport { Pane } from '@rollthecloudinc/panels';\nimport { JsonChartContentHandler } from \"./handlers/json-chart-content.handler\";\nimport { JsonChart } from \"./models/json-chart.model\";\nimport { Subject, tap } from \"rxjs\";\nimport { JsonChartRefComponent } from \"./json-chart-ref.component\";\n\n@Component({\n  selector: 'amcharts5-plugin-json-chart-editor',\n  templateUrl: 'json-chart-editor.component.html',\n  styleUrls: ['json-chart-editor.component.scss'],\n  providers: [\n    JsonChartContentHandler\n  ],\n})\n\nexport class JsonChartEditorComponent implements OnInit {\n  private dialogRef = inject(MatDialogRef<JsonChartEditorComponent>);\n  private dialogData: { panelFormGroup: UntypedFormGroup; paneIndex: number; pane: Pane } = inject(MAT_DIALOG_DATA);\n  private handler = inject(JsonChartContentHandler);\n  private attributeSerializer = inject(AttributeSerializerService);\n  private jsonChart: JsonChart;\n  readonly addRef$ = new Subject();\n  bindableOptions: Array<string> = [];\n  rows = 40;\n  cols = 100;\n  contentForm = new FormGroup({\n    refs: new FormArray([]),\n    json: new FormControl<string>('', Validators.required)\n  });\n  readonly addRefSub = this.addRef$.pipe(\n    tap(() => {\n      this.refs.push(this.createRef());\n    })\n  ).subscribe();\n  get refs(): FormArray {\n    return (this.contentForm.get('refs') as FormArray);\n  }\n  ngOnInit(): void {\n    this.bindableOptions = (this.dialogData.panelFormGroup.get('panes') as UntypedFormArray).controls.reduce<Array<string>>((p, c) => (c.get('name').value ? [ ...p, c.get('name').value ] : [ ...p ]), []);\n    if(this.dialogData.pane !== undefined) {\n      this.handler.toObject(this.dialogData.pane.settings).subscribe((jsonChart: JsonChart) => {\n        this.jsonChart = jsonChart;\n        this.contentForm.get('json').setValue(this.jsonChart.json);\n        if (jsonChart.refs) {\n          jsonChart.refs.forEach(() => this.refs.push(this.createRef()));\n        }\n      });\n    }\n  }\n  submit() {\n    let paneIndex: number;\n    if(this.dialogData.paneIndex === undefined) {\n      (this.dialogData.panelFormGroup.get('panes') as UntypedFormArray).push(new FormGroup({\n        contentPlugin: new UntypedFormControl('amcharts5_json_chart'),\n        name: new UntypedFormControl(''),\n        label: new UntypedFormControl(''),\n        rule: new UntypedFormControl(''),\n        settings: new UntypedFormArray([])\n      }));\n      paneIndex = (this.dialogData.panelFormGroup.get('panes') as UntypedFormArray).length - 1;\n    } else {\n      paneIndex = this.dialogData.paneIndex;\n    }\n    const paneForm = (this.dialogData.panelFormGroup.get('panes') as UntypedFormArray).at(paneIndex);\n    const json = this.contentForm.get('json').value;\n    const refs = this.contentForm.get('refs').value;\n\n    const jsonChart = new JsonChart({ json, refs });\n\n    (paneForm.get('settings') as UntypedFormArray).clear();\n    const controls = this.handler.buildSettings(jsonChart).map(s => this.attributeSerializer.convertToGroup(s));\n    controls.forEach(c => (paneForm.get('settings') as UntypedFormArray).push(c));\n\n    this.dialogRef.close();\n  }\n  private createRef(): UntypedFormControl {\n    return new UntypedFormControl('')\n  }\n\n}","<form [formGroup]=\"contentForm\" (ngSubmit)=\"submit()\">\n  <mat-dialog-content>\n    <div class=\"content-inner\">\n      <div class=\"left\">\n        <textarea formControlName=\"json\" [cols]=\"cols\" [rows]=\"rows\"></textarea>\n      </div>\n      <div class=\"right\">\n        <div formArrayName=\"refs\">\n          <amcharts5-plugin-json-chart-ref *ngFor=\"let _ of refs.controls; let i = index\" [formControlName]=\"i\" [bindableOptions]=\"bindableOptions\" [ref]=\"jsonChart?.refs[i]\"></amcharts5-plugin-json-chart-ref>\n          <button type=\"button\" (click)=\"addRef$.next(undefined)\">Add Ref</button>\n        </div>\n      </div>\n    </div>\n  </mat-dialog-content>\n  <mat-dialog-actions>\n    <button type=\"submit\" mat-raised-button color=\"primary\" mat-dialog-close [disabled]=\"!contentForm.valid\">Save</button>\n  </mat-dialog-actions>\n</form>","import { AfterViewInit, Component, forwardRef, inject, Input, OnInit } from \"@angular/core\";\nimport { AbstractControl, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors, Validator, Validators, FormBuilder } from \"@angular/forms\";\nimport { BehaviorSubject, Subject } from \"rxjs\";\nimport { tap} from 'rxjs/operators';\nimport { JsonChartRef } from \"./models/json-chart.model\";\n\n@Component({\n  selector: 'amcharts5-plugin-json-chart-ref',\n  templateUrl: './json-chart-ref.component.html',\n  // styleUrls: ['./json-chart-ref.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => JsonChartRefComponent),\n      multi: true\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => JsonChartRefComponent),\n      multi: true\n    }\n  ]\n})\nexport class JsonChartRefComponent implements ControlValueAccessor, Validator, AfterViewInit, OnInit {\n\n  private fb = inject(FormBuilder);\n\n  @Input() set ref(v: JsonChartRef) {\n    this.ref$.next(v);\n  }\n\n  @Input() set bindableOptions(bo: Array<string>) {\n    this.bindableOptions$.next(bo);\n  }\n\n  readonly formGroup = this.fb.group({\n    id: this.fb.control<string>('', Validators.required),\n    name: this.fb.control<string>('', Validators.required),\n    type: this.fb.control<string>('pane')\n  });\n\n  readonly afterViewInit$ = new Subject();\n  readonly onInit$ = new Subject();\n  readonly ref$ = new BehaviorSubject<JsonChartRef>(undefined);\n  readonly bindableOptions$ = new BehaviorSubject<Array<string>>([]);\n\n  readonly refSub = this.ref$.pipe(\n    tap(v => {\n      if (v) {\n        this.formGroup.get('name').setValue(v.name);\n        this.formGroup.get('id').setValue(v.id);\n        this.formGroup.get('type').setValue(v.type);\n      } else {\n        this.formGroup.get('name').setValue('');\n        this.formGroup.get('id').setValue('');\n        this.formGroup.get('type').setValue('pane');\n      }\n    }),\n  ).subscribe();\n\n  public onTouched: () => void = () => {};\n\n  ngOnInit() {\n    this.onInit$.next(undefined);\n    this.onInit$.complete();\n  }\n\n  ngAfterViewInit() {\n    this.afterViewInit$.next(undefined);\n    this.afterViewInit$.complete();\n  }\n\n  writeValue(val: any): void {\n    if (val) {\n      this.formGroup.setValue(val);\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.formGroup.valueChanges.subscribe(fn);\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    if (isDisabled) {\n      this.formGroup.disable()\n    } else {\n      this.formGroup.enable()\n    }\n  }\n\n  validate(c: AbstractControl): ValidationErrors | null{\n    return this.formGroup.valid ? null : { invalidForm: {valid: false, message: \"ref is invalid\"}};\n  }\n\n}","<div [formGroup]=\"formGroup\">\n  <div>\n    <mat-form-field>\n      <mat-label>Name</mat-label>\n      <input matInput type=\"text\" formControlName=\"name\">\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label>Datasource</mat-label>\n      <mat-select required formControlName=\"id\">\n        <mat-option *ngFor=\"let bo of (bindableOptions$ | async)\" [value]=\"bo\">{{ bo }}</mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n</div>"],"names":["inject","FormArray","FormControl","FormGroup","UntypedFormArray","UntypedFormControl","Validators","MAT_LEGACY_DIALOG_DATA","MAT_DIALOG_DATA","MatLegacyDialogRef","MatDialogRef","AttributeSerializerService","JsonChartContentHandler","JsonChart","Subject","tap","i0","ɵɵelement","ɵɵproperty","i_r2","ctx_r0","bindableOptions","jsonChart","refs","JsonChartEditorComponent","constructor","dialogRef","dialogData","handler","attributeSerializer","addRef$","rows","cols","contentForm","json","required","addRefSub","pipe","push","createRef","subscribe","get","ngOnInit","panelFormGroup","controls","reduce","p","c","value","pane","undefined","toObject","settings","setValue","forEach","submit","paneIndex","contentPlugin","name","label","rule","length","paneForm","at","clear","buildSettings","map","s","convertToGroup","close","_","_2","selectors","features","ɵɵProvidersFeature","decls","vars","consts","template","JsonChartEditorComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","JsonChartEditorComponent_Template_form_ngSubmit_0_listener","ɵɵelementEnd","ɵɵtemplate","JsonChartEditorComponent_amcharts5_plugin_json_chart_ref_7_Template","JsonChartEditorComponent_Template_button_click_8_listener","next","ɵɵtext","ɵɵadvance","valid","forwardRef","NG_VALIDATORS","NG_VALUE_ACCESSOR","FormBuilder","BehaviorSubject","bo_r1","ɵɵtextInterpolate","JsonChartRefComponent","fb","formGroup","group","id","control","type","afterViewInit$","onInit$","ref$","bindableOptions$","refSub","v","onTouched","ref","bo","complete","ngAfterViewInit","writeValue","val","registerOnChange","fn","valueChanges","registerOnTouched","setDisabledState","isDisabled","disable","enable","validate","invalidForm","message","inputs","provide","useExisting","multi","JsonChartRefComponent_Template","JsonChartRefComponent_mat_option_10_Template","ɵɵpipeBind1"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}