{"version":3,"file":"3704.js","mappings":"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","sources":["./node_modules/@angular/material/fesm2022/legacy-progress-spinner.mjs"],"sourcesContent":["import { coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getShadowRoot } from '@angular/cdk/platform';\nimport * as i2 from '@angular/cdk/scrolling';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { CSP_NONCE, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS } from '@angular/material/progress-spinner';\nexport { MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS as MAT_LEGACY_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY as MAT_LEGACY_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY } from '@angular/material/progress-spinner';\nimport { Subscription } from 'rxjs';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n// Boilerplate for applying mixins to MatLegacyProgressSpinner.\n/** @docs-private */\nconst _MatProgressSpinnerBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}, 'primary');\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n/**\n * `<mat-progress-spinner>` component.\n * @deprecated Use `MatProgressSpinner` from `@angular/material/progress-spinner` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyProgressSpinner extends _MatProgressSpinnerBase {\n    /**\n     * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n     * We need to keep track of which elements the diameters were attached to, because for\n     * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n     * than the document head.\n     */\n    static { this._diameters = new WeakMap(); }\n    /** The diameter of the progress spinner (will set width and height of svg). */\n    get diameter() {\n        return this._diameter;\n    }\n    set diameter(size) {\n        this._diameter = coerceNumberProperty(size);\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n        // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n        if (this._styleRoot) {\n            this._attachStyleNode();\n        }\n    }\n    /** Stroke width of the progress spinner. */\n    get strokeWidth() {\n        return this._strokeWidth || this.diameter / 10;\n    }\n    set strokeWidth(value) {\n        this._strokeWidth = coerceNumberProperty(value);\n    }\n    /** Value of the progress circle. */\n    get value() {\n        return this.mode === 'determinate' ? this._value : 0;\n    }\n    set value(newValue) {\n        this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n    }\n    constructor(elementRef, _platform, _document, animationMode, defaults, \n    /**\n     * @deprecated `changeDetectorRef`, `viewportRuler` and `ngZone`\n     * parameters to become required.\n     * @breaking-change 14.0.0\n     */\n    changeDetectorRef, viewportRuler, ngZone, _nonce) {\n        super(elementRef);\n        this._document = _document;\n        this._nonce = _nonce;\n        this._diameter = BASE_SIZE;\n        this._value = 0;\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Mode of the progress circle */\n        this.mode = 'determinate';\n        const trackedDiameters = MatLegacyProgressSpinner._diameters;\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n        // The base size is already inserted via the component's structural styles. We still\n        // need to track it so we don't end up adding the same styles again.\n        if (!trackedDiameters.has(_document.head)) {\n            trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\n        }\n        this._noopAnimations =\n            animationMode === 'NoopAnimations' && !!defaults && !defaults._forceAnimations;\n        if (elementRef.nativeElement.nodeName.toLowerCase() === 'mat-spinner') {\n            this.mode = 'indeterminate';\n        }\n        if (defaults) {\n            if (defaults.color) {\n                this.color = this.defaultColor = defaults.color;\n            }\n            if (defaults.diameter) {\n                this.diameter = defaults.diameter;\n            }\n            if (defaults.strokeWidth) {\n                this.strokeWidth = defaults.strokeWidth;\n            }\n        }\n        // Safari has an issue where the circle isn't positioned correctly when the page has a\n        // different zoom level from the default. This handler triggers a recalculation of the\n        // `transform-origin` when the page zoom level changes.\n        // See `_getCircleTransformOrigin` for more info.\n        // @breaking-change 14.0.0 Remove null checks for `_changeDetectorRef`,\n        // `viewportRuler` and `ngZone`.\n        if (_platform.isBrowser && _platform.SAFARI && viewportRuler && changeDetectorRef && ngZone) {\n            this._resizeSubscription = viewportRuler.change(150).subscribe(() => {\n                // When the window is resize while the spinner is in `indeterminate` mode, we\n                // have to mark for check so the transform origin of the circle can be recomputed.\n                if (this.mode === 'indeterminate') {\n                    ngZone.run(() => changeDetectorRef.markForCheck());\n                }\n            });\n        }\n    }\n    ngOnInit() {\n        const element = this._elementRef.nativeElement;\n        // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n        // Angular seems to create the element outside the shadow root and then moves it inside, if the\n        // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n        this._styleRoot = _getShadowRoot(element) || this._document.head;\n        this._attachStyleNode();\n        element.classList.add('mat-progress-spinner-indeterminate-animation');\n    }\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n    /** The radius of the spinner, adjusted for stroke width. */\n    _getCircleRadius() {\n        return (this.diameter - BASE_STROKE_WIDTH) / 2;\n    }\n    /** The view box of the spinner's svg element. */\n    _getViewBox() {\n        const viewBox = this._getCircleRadius() * 2 + this.strokeWidth;\n        return `0 0 ${viewBox} ${viewBox}`;\n    }\n    /** The stroke circumference of the svg circle. */\n    _getStrokeCircumference() {\n        return 2 * Math.PI * this._getCircleRadius();\n    }\n    /** The dash offset of the svg circle. */\n    _getStrokeDashOffset() {\n        if (this.mode === 'determinate') {\n            return (this._getStrokeCircumference() * (100 - this._value)) / 100;\n        }\n        return null;\n    }\n    /** Stroke width of the circle in percent. */\n    _getCircleStrokeWidth() {\n        return (this.strokeWidth / this.diameter) * 100;\n    }\n    /** Gets the `transform-origin` for the inner circle element. */\n    _getCircleTransformOrigin(svg) {\n        // Safari has an issue where the `transform-origin` doesn't work as expected when the page\n        // has a different zoom level from the default. The problem appears to be that a zoom\n        // is applied on the `svg` node itself. We can work around it by calculating the origin\n        // based on the zoom level. On all other browsers the `currentScale` appears to always be 1.\n        const scale = (svg.currentScale ?? 1) * 50;\n        return `${scale}% ${scale}%`;\n    }\n    /** Dynamically generates a style tag containing the correct animation for this diameter. */\n    _attachStyleNode() {\n        const styleRoot = this._styleRoot;\n        const currentDiameter = this._diameter;\n        const diameters = MatLegacyProgressSpinner._diameters;\n        let diametersForElement = diameters.get(styleRoot);\n        if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n            const styleTag = this._document.createElement('style');\n            if (this._nonce) {\n                styleTag.nonce = this._nonce;\n            }\n            styleTag.setAttribute('mat-spinner-animation', this._spinnerAnimationLabel);\n            styleTag.textContent = this._getAnimationText();\n            styleRoot.appendChild(styleTag);\n            if (!diametersForElement) {\n                diametersForElement = new Set();\n                diameters.set(styleRoot, diametersForElement);\n            }\n            diametersForElement.add(currentDiameter);\n        }\n    }\n    /** Generates animation styles adjusted for the spinner's diameter. */\n    _getAnimationText() {\n        const strokeCircumference = this._getStrokeCircumference();\n        return (INDETERMINATE_ANIMATION_TEMPLATE\n            // Animation should begin at 5% and end at 80%\n            .replace(/START_VALUE/g, `${0.95 * strokeCircumference}`)\n            .replace(/END_VALUE/g, `${0.2 * strokeCircumference}`)\n            .replace(/DIAMETER/g, `${this._spinnerAnimationLabel}`));\n    }\n    /** Returns the circle diameter formatted for use with the animation-name CSS property. */\n    _getSpinnerAnimationLabel() {\n        // The string of a float point number will include a period ‘.’ character,\n        // which is not valid for a CSS animation-name.\n        return this.diameter.toString().replace('.', '_');\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyProgressSpinner, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: DOCUMENT, optional: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }, { token: i2.ViewportRuler }, { token: i0.NgZone }, { token: CSP_NONCE, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatLegacyProgressSpinner, selector: \"mat-progress-spinner, mat-spinner\", inputs: { color: \"color\", diameter: \"diameter\", strokeWidth: \"strokeWidth\", mode: \"mode\", value: \"value\" }, host: { attributes: { \"role\": \"progressbar\", \"tabindex\": \"-1\" }, properties: { \"class._mat-animation-noopable\": \"_noopAnimations\", \"style.width.px\": \"diameter\", \"style.height.px\": \"diameter\", \"attr.aria-valuemin\": \"mode === \\\"determinate\\\" ? 0 : null\", \"attr.aria-valuemax\": \"mode === \\\"determinate\\\" ? 100 : null\", \"attr.aria-valuenow\": \"mode === \\\"determinate\\\" ? value : null\", \"attr.mode\": \"mode\" }, classAttribute: \"mat-progress-spinner mat-spinner\" }, exportAs: [\"matProgressSpinner\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\"\\n  #svg>\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n</svg>\\n\", styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:rgba(0,0,0,0);transition:stroke-dashoffset 225ms linear}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:CanvasText}.mat-progress-spinner[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}.mat-progress-spinner[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}.mat-progress-spinner._mat-animation-noopable svg,.mat-progress-spinner._mat-animation-noopable circle{animation:none;transition:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}\"], dependencies: [{ kind: \"directive\", type: i3.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { kind: \"directive\", type: i3.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyProgressSpinner, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-progress-spinner, mat-spinner', exportAs: 'matProgressSpinner', host: {\n                        'role': 'progressbar',\n                        // `mat-spinner` is here for backward compatibility.\n                        'class': 'mat-progress-spinner mat-spinner',\n                        // set tab index to -1 so screen readers will read the aria-label\n                        // Note: there is a known issue with JAWS that does not read progressbar aria labels on FireFox\n                        'tabindex': '-1',\n                        '[class._mat-animation-noopable]': `_noopAnimations`,\n                        '[style.width.px]': 'diameter',\n                        '[style.height.px]': 'diameter',\n                        '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n                        '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n                        '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n                        '[attr.mode]': 'mode',\n                    }, inputs: ['color'], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\"\\n  #svg>\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n</svg>\\n\", styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:rgba(0,0,0,0);transition:stroke-dashoffset 225ms linear}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:CanvasText}.mat-progress-spinner[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}.mat-progress-spinner[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}.mat-progress-spinner._mat-animation-noopable svg,.mat-progress-spinner._mat-animation-noopable circle{animation:none;transition:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n                }] }, { type: i0.ChangeDetectorRef }, { type: i2.ViewportRuler }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CSP_NONCE]\n                }, {\n                    type: Optional\n                }] }]; }, propDecorators: { diameter: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], mode: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }] } });\n\n/**\n * @deprecated Use `MatProgressSpinnerModule` from `@angular/material/progress-spinner` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyProgressSpinnerModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyProgressSpinnerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyProgressSpinnerModule, declarations: [MatLegacyProgressSpinner], imports: [MatCommonModule, CommonModule], exports: [MatLegacyProgressSpinner, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyProgressSpinnerModule, imports: [MatCommonModule, CommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyProgressSpinnerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, CommonModule],\n                    exports: [MatLegacyProgressSpinner, MatCommonModule],\n                    declarations: [MatLegacyProgressSpinner],\n                }]\n        }] });\n\n/**\n * @deprecated Import Progress Spinner instead. Note that the\n *    `mat-spinner` selector isn't deprecated.\n * @breaking-change 8.0.0\n */\n// tslint:disable-next-line:variable-name\nconst MatLegacySpinner = MatLegacyProgressSpinner;\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatLegacyProgressSpinner, MatLegacyProgressSpinnerModule, MatLegacySpinner };\n"],"names":["coerceNumberProperty","i1","_getShadowRoot","i2","i3","DOCUMENT","CommonModule","i0","CSP_NONCE","Component","ChangeDetectionStrategy","ViewEncapsulation","Optional","Inject","Input","NgModule","mixinColor","MatCommonModule","ANIMATION_MODULE_TYPE","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_LEGACY_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","MAT_LEGACY_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","Subscription","MatLegacyProgressSpinner__svg_circle_2_Template","rf","ctx","ɵɵnamespaceSVG","ɵɵelement","ctx_r1","ɵɵnextContext","_r0","ɵɵreference","ɵɵstyleProp","_spinnerAnimationLabel","_getStrokeDashOffset","_getStrokeCircumference","_getCircleStrokeWidth","_getCircleTransformOrigin","ɵɵattribute","_getCircleRadius","MatLegacyProgressSpinner__svg_circle_3_Template","ctx_r2","BASE_SIZE","BASE_STROKE_WIDTH","_MatProgressSpinnerBase","constructor","_elementRef","INDETERMINATE_ANIMATION_TEMPLATE","MatLegacyProgressSpinner","_","_diameters","WeakMap","diameter","_diameter","size","_getSpinnerAnimationLabel","_styleRoot","_attachStyleNode","strokeWidth","_strokeWidth","value","mode","_value","newValue","Math","max","min","elementRef","_platform","_document","animationMode","defaults","changeDetectorRef","viewportRuler","ngZone","_nonce","_resizeSubscription","EMPTY","trackedDiameters","has","head","set","Set","_noopAnimations","_forceAnimations","nativeElement","nodeName","toLowerCase","color","defaultColor","isBrowser","SAFARI","change","subscribe","run","markForCheck","ngOnInit","element","classList","add","ngOnDestroy","unsubscribe","_getViewBox","viewBox","PI","svg","scale","currentScale","styleRoot","currentDiameter","diameters","diametersForElement","get","styleTag","createElement","nonce","setAttribute","textContent","_getAnimationText","appendChild","strokeCircumference","replace","toString","_2","ɵfac","MatLegacyProgressSpinner_Factory","t","ɵɵdirectiveInject","ElementRef","Platform","ChangeDetectorRef","ViewportRuler","NgZone","_3","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","hostVars","hostBindings","MatLegacyProgressSpinner_HostBindings","ɵɵclassProp","inputs","exportAs","features","ɵɵInheritDefinitionFeature","decls","vars","consts","template","MatLegacyProgressSpinner_Template","ɵɵelementStart","ɵɵtemplate","ɵɵelementEnd","ɵɵproperty","ɵɵadvance","dependencies","NgSwitch","NgSwitchCase","styles","encapsulation","changeDetection","ngDevMode","ɵsetClassMetadata","args","selector","host","OnPush","None","undefined","decorators","MatLegacyProgressSpinnerModule","MatLegacyProgressSpinnerModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","MatLegacySpinner"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}