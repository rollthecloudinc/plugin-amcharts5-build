{"version":3,"file":"8800.js","mappings":"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","sources":["./node_modules/rxjs/dist/esm/internal/Subject.js","./node_modules/rxjs/dist/esm/internal/observable/empty.js","./node_modules/rxjs/dist/esm/internal/observable/forkJoin.js","./node_modules/rxjs/dist/esm/internal/observable/of.js","./node_modules/rxjs/dist/esm/internal/observable/throwError.js","./node_modules/rxjs/dist/esm/internal/operators/OperatorSubscriber.js","./node_modules/rxjs/dist/esm/internal/operators/catchError.js","./node_modules/rxjs/dist/esm/internal/operators/finalize.js","./node_modules/rxjs/dist/esm/internal/operators/map.js","./node_modules/rxjs/dist/esm/internal/operators/share.js","./node_modules/rxjs/dist/esm/internal/operators/take.js","./node_modules/rxjs/dist/esm/internal/operators/tap.js","./node_modules/rxjs/dist/esm/internal/util/ObjectUnsubscribedError.js","./node_modules/rxjs/dist/esm/internal/util/argsArgArrayOrObject.js","./node_modules/rxjs/dist/esm/internal/util/createObject.js","./node_modules/rxjs/dist/esm/internal/util/lift.js","./node_modules/rxjs/dist/esm/internal/util/mapOneOrManyArgs.js","./node_modules/@angular/material/fesm2022/icon.mjs"],"sourcesContent":["import { Observable } from './Observable';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\nexport class Subject extends Observable {\n    constructor() {\n        super();\n        this.closed = false;\n        this.currentObservers = null;\n        this.observers = [];\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    lift(operator) {\n        const subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    }\n    _throwIfClosed() {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n    }\n    next(value) {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                if (!this.currentObservers) {\n                    this.currentObservers = Array.from(this.observers);\n                }\n                for (const observer of this.currentObservers) {\n                    observer.next(value);\n                }\n            }\n        });\n    }\n    error(err) {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                this.hasError = this.isStopped = true;\n                this.thrownError = err;\n                const { observers } = this;\n                while (observers.length) {\n                    observers.shift().error(err);\n                }\n            }\n        });\n    }\n    complete() {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                this.isStopped = true;\n                const { observers } = this;\n                while (observers.length) {\n                    observers.shift().complete();\n                }\n            }\n        });\n    }\n    unsubscribe() {\n        this.isStopped = this.closed = true;\n        this.observers = this.currentObservers = null;\n    }\n    get observed() {\n        var _a;\n        return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    _trySubscribe(subscriber) {\n        this._throwIfClosed();\n        return super._trySubscribe(subscriber);\n    }\n    _subscribe(subscriber) {\n        this._throwIfClosed();\n        this._checkFinalizedStatuses(subscriber);\n        return this._innerSubscribe(subscriber);\n    }\n    _innerSubscribe(subscriber) {\n        const { hasError, isStopped, observers } = this;\n        if (hasError || isStopped) {\n            return EMPTY_SUBSCRIPTION;\n        }\n        this.currentObservers = null;\n        observers.push(subscriber);\n        return new Subscription(() => {\n            this.currentObservers = null;\n            arrRemove(observers, subscriber);\n        });\n    }\n    _checkFinalizedStatuses(subscriber) {\n        const { hasError, thrownError, isStopped } = this;\n        if (hasError) {\n            subscriber.error(thrownError);\n        }\n        else if (isStopped) {\n            subscriber.complete();\n        }\n    }\n    asObservable() {\n        const observable = new Observable();\n        observable.source = this;\n        return observable;\n    }\n}\nSubject.create = (destination, source) => {\n    return new AnonymousSubject(destination, source);\n};\nexport class AnonymousSubject extends Subject {\n    constructor(destination, source) {\n        super();\n        this.destination = destination;\n        this.source = source;\n    }\n    next(value) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n    }\n    error(err) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);\n    }\n    complete() {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    _subscribe(subscriber) {\n        var _a, _b;\n        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;\n    }\n}\n","import { Observable } from '../Observable';\nexport const EMPTY = new Observable((subscriber) => subscriber.complete());\nexport function empty(scheduler) {\n    return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\nfunction emptyScheduled(scheduler) {\n    return new Observable((subscriber) => scheduler.schedule(() => subscriber.complete()));\n}\n","import { Observable } from '../Observable';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { innerFrom } from './innerFrom';\nimport { popResultSelector } from '../util/args';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { createObject } from '../util/createObject';\nexport function forkJoin(...args) {\n    const resultSelector = popResultSelector(args);\n    const { args: sources, keys } = argsArgArrayOrObject(args);\n    const result = new Observable((subscriber) => {\n        const { length } = sources;\n        if (!length) {\n            subscriber.complete();\n            return;\n        }\n        const values = new Array(length);\n        let remainingCompletions = length;\n        let remainingEmissions = length;\n        for (let sourceIndex = 0; sourceIndex < length; sourceIndex++) {\n            let hasValue = false;\n            innerFrom(sources[sourceIndex]).subscribe(createOperatorSubscriber(subscriber, (value) => {\n                if (!hasValue) {\n                    hasValue = true;\n                    remainingEmissions--;\n                }\n                values[sourceIndex] = value;\n            }, () => remainingCompletions--, undefined, () => {\n                if (!remainingCompletions || !hasValue) {\n                    if (!remainingEmissions) {\n                        subscriber.next(keys ? createObject(keys, values) : values);\n                    }\n                    subscriber.complete();\n                }\n            }));\n        }\n    });\n    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}\n","import { popScheduler } from '../util/args';\nimport { from } from './from';\nexport function of(...args) {\n    const scheduler = popScheduler(args);\n    return from(args, scheduler);\n}\n","import { Observable } from '../Observable';\nimport { isFunction } from '../util/isFunction';\nexport function throwError(errorOrErrorFactory, scheduler) {\n    const errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : () => errorOrErrorFactory;\n    const init = (subscriber) => subscriber.error(errorFactory());\n    return new Observable(scheduler ? (subscriber) => scheduler.schedule(init, 0, subscriber) : init);\n}\n","import { Subscriber } from '../Subscriber';\nexport function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {\n    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);\n}\nexport class OperatorSubscriber extends Subscriber {\n    constructor(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {\n        super(destination);\n        this.onFinalize = onFinalize;\n        this.shouldUnsubscribe = shouldUnsubscribe;\n        this._next = onNext\n            ? function (value) {\n                try {\n                    onNext(value);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n            }\n            : super._next;\n        this._error = onError\n            ? function (err) {\n                try {\n                    onError(err);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : super._error;\n        this._complete = onComplete\n            ? function () {\n                try {\n                    onComplete();\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : super._complete;\n    }\n    unsubscribe() {\n        var _a;\n        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n            const { closed } = this;\n            super.unsubscribe();\n            !closed && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));\n        }\n    }\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { operate } from '../util/lift';\nexport function catchError(selector) {\n    return operate((source, subscriber) => {\n        let innerSub = null;\n        let syncUnsub = false;\n        let handledResult;\n        innerSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, undefined, (err) => {\n            handledResult = innerFrom(selector(err, catchError(selector)(source)));\n            if (innerSub) {\n                innerSub.unsubscribe();\n                innerSub = null;\n                handledResult.subscribe(subscriber);\n            }\n            else {\n                syncUnsub = true;\n            }\n        }));\n        if (syncUnsub) {\n            innerSub.unsubscribe();\n            innerSub = null;\n            handledResult.subscribe(subscriber);\n        }\n    });\n}\n","import { operate } from '../util/lift';\nexport function finalize(callback) {\n    return operate((source, subscriber) => {\n        try {\n            source.subscribe(subscriber);\n        }\n        finally {\n            subscriber.add(callback);\n        }\n    });\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function map(project, thisArg) {\n    return operate((source, subscriber) => {\n        let index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            subscriber.next(project.call(thisArg, value, index++));\n        }));\n    });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { operate } from '../util/lift';\nexport function share(options = {}) {\n    const { connector = () => new Subject(), resetOnError = true, resetOnComplete = true, resetOnRefCountZero = true } = options;\n    return (wrapperSource) => {\n        let connection;\n        let resetConnection;\n        let subject;\n        let refCount = 0;\n        let hasCompleted = false;\n        let hasErrored = false;\n        const cancelReset = () => {\n            resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();\n            resetConnection = undefined;\n        };\n        const reset = () => {\n            cancelReset();\n            connection = subject = undefined;\n            hasCompleted = hasErrored = false;\n        };\n        const resetAndUnsubscribe = () => {\n            const conn = connection;\n            reset();\n            conn === null || conn === void 0 ? void 0 : conn.unsubscribe();\n        };\n        return operate((source, subscriber) => {\n            refCount++;\n            if (!hasErrored && !hasCompleted) {\n                cancelReset();\n            }\n            const dest = (subject = subject !== null && subject !== void 0 ? subject : connector());\n            subscriber.add(() => {\n                refCount--;\n                if (refCount === 0 && !hasErrored && !hasCompleted) {\n                    resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n                }\n            });\n            dest.subscribe(subscriber);\n            if (!connection &&\n                refCount > 0) {\n                connection = new SafeSubscriber({\n                    next: (value) => dest.next(value),\n                    error: (err) => {\n                        hasErrored = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnError, err);\n                        dest.error(err);\n                    },\n                    complete: () => {\n                        hasCompleted = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnComplete);\n                        dest.complete();\n                    },\n                });\n                innerFrom(source).subscribe(connection);\n            }\n        })(wrapperSource);\n    };\n}\nfunction handleReset(reset, on, ...args) {\n    if (on === true) {\n        reset();\n        return;\n    }\n    if (on === false) {\n        return;\n    }\n    const onSubscriber = new SafeSubscriber({\n        next: () => {\n            onSubscriber.unsubscribe();\n            reset();\n        },\n    });\n    return on(...args).subscribe(onSubscriber);\n}\n","import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function take(count) {\n    return count <= 0\n        ?\n            () => EMPTY\n        : operate((source, subscriber) => {\n            let seen = 0;\n            source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n                if (++seen <= count) {\n                    subscriber.next(value);\n                    if (count <= seen) {\n                        subscriber.complete();\n                    }\n                }\n            }));\n        });\n}\n","import { isFunction } from '../util/isFunction';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nexport function tap(observerOrNext, error, complete) {\n    const tapObserver = isFunction(observerOrNext) || error || complete\n        ?\n            { next: observerOrNext, error, complete }\n        : observerOrNext;\n    return tapObserver\n        ? operate((source, subscriber) => {\n            var _a;\n            (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n            let isUnsub = true;\n            source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n                var _a;\n                (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);\n                subscriber.next(value);\n            }, () => {\n                var _a;\n                isUnsub = false;\n                (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n                subscriber.complete();\n            }, (err) => {\n                var _a;\n                isUnsub = false;\n                (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);\n                subscriber.error(err);\n            }, () => {\n                var _a, _b;\n                if (isUnsub) {\n                    (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n                }\n                (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);\n            }));\n        })\n        :\n            identity;\n}\n","import { createErrorClass } from './createErrorClass';\nexport const ObjectUnsubscribedError = createErrorClass((_super) => function ObjectUnsubscribedErrorImpl() {\n    _super(this);\n    this.name = 'ObjectUnsubscribedError';\n    this.message = 'object unsubscribed';\n});\n","const { isArray } = Array;\nconst { getPrototypeOf, prototype: objectProto, keys: getKeys } = Object;\nexport function argsArgArrayOrObject(args) {\n    if (args.length === 1) {\n        const first = args[0];\n        if (isArray(first)) {\n            return { args: first, keys: null };\n        }\n        if (isPOJO(first)) {\n            const keys = getKeys(first);\n            return {\n                args: keys.map((key) => first[key]),\n                keys,\n            };\n        }\n    }\n    return { args: args, keys: null };\n}\nfunction isPOJO(obj) {\n    return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;\n}\n","export function createObject(keys, values) {\n    return keys.reduce((result, key, i) => ((result[key] = values[i]), result), {});\n}\n","import { isFunction } from './isFunction';\nexport function hasLift(source) {\n    return isFunction(source === null || source === void 0 ? void 0 : source.lift);\n}\nexport function operate(init) {\n    return (source) => {\n        if (hasLift(source)) {\n            return source.lift(function (liftedSource) {\n                try {\n                    return init(liftedSource, this);\n                }\n                catch (err) {\n                    this.error(err);\n                }\n            });\n        }\n        throw new TypeError('Unable to lift unknown Observable type');\n    };\n}\n","import { map } from \"../operators/map\";\nconst { isArray } = Array;\nfunction callOrApply(fn, args) {\n    return isArray(args) ? fn(...args) : fn(args);\n}\nexport function mapOneOrManyArgs(fn) {\n    return map(args => callOrApply(fn, args));\n}\n","import * as i0 from '@angular/core';\nimport { SecurityContext, Injectable, Optional, Inject, SkipSelf, ErrorHandler, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy() {\n    if (policy === undefined) {\n        policy = null;\n        if (typeof window !== 'undefined') {\n            const ttWindow = window;\n            if (ttWindow.trustedTypes !== undefined) {\n                policy = ttWindow.trustedTypes.createPolicy('angular#components', {\n                    createHTML: (s) => s,\n                });\n            }\n        }\n    }\n    return policy;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nfunction trustedHTMLFromString(html) {\n    return getPolicy()?.createHTML(html) || html;\n}\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n    constructor(url, svgText, options) {\n        this.url = url;\n        this.svgText = svgText;\n        this.options = options;\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /** Cache for icons loaded by direct URLs. */\n        this._cachedIconsByUrl = new Map();\n        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n        this._inProgressUrlFetches = new Map();\n        /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n        this._fontCssClassesByAlias = new Map();\n        /** Registered icon resolver functions. */\n        this._resolvers = [];\n        /**\n         * The CSS classes to apply when an `<mat-icon>` component has no icon name, url, or font\n         * specified. The default 'material-icons' value assumes that the material icon font has been\n         * loaded as described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = ['material-icons', 'mat-ligature-font'];\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName, url, options) {\n        return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon resolver function with the registry. The function will be invoked with the\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n     * will be invoked in the order in which they have been registered.\n     * @param resolver Resolver function to be registered.\n     */\n    addSvgIconResolver(resolver) {\n        this._resolvers.push(resolver);\n        return this;\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        // TODO: add an ngDevMode check\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url, options) {\n        return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Defines an alias for CSS class names to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * If the registered font is a ligature font, then don't forget to also include the special\n     * class `mat-ligature-font` to allow the usage via attribute. So register like this:\n     *\n     * ```ts\n     * iconRegistry.registerFontClassAlias('f1', 'font1 mat-ligature-font');\n     * ```\n     *\n     * And use like this:\n     *\n     * ```html\n     * <mat-icon fontSet=\"f1\" fontIcon=\"home\"></mat-icon>\n     * ```\n     *\n     * @param alias Alias for the font.\n     * @param classNames Class names override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias, classNames = alias) {\n        this._fontCssClassesByAlias.set(alias, classNames);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    setDefaultFontSetClass(...classNames) {\n        this._defaultFontSetClass = classNames;\n        return this;\n    }\n    /**\n     * Returns the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl) {\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        const key = iconKey(namespace, name);\n        let config = this._svgIconConfigs.get(key);\n        // Return (copy of) cached icon if possible.\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // Otherwise try to resolve the config from one of the resolver functions.\n        config = this._getIconConfigFromResolvers(namespace, name);\n        if (config) {\n            this._svgIconConfigs.set(key, config);\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    ngOnDestroy() {\n        this._resolvers = [];\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgText) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(this._svgElementFromConfig(config)));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgText)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            // TODO: add an ngDevMode check\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            const config = iconSetConfigs[i];\n            // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n            // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n            // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n            // some of the parsing.\n            if (config.svgText && config.svgText.toString().indexOf(iconName) > -1) {\n                const svg = this._svgElementFromConfig(config);\n                const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)), map(() => this._svgElementFromConfig(config)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n    _loadSvgIconSetFromConfig(config) {\n        if (config.svgText) {\n            return of(null);\n        }\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        const iconElement = iconSource.cloneNode(true);\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(iconElement, options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    _svgElementFromString(str) {\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        const svg = div.querySelector('svg');\n        // TODO: add an ngDevMode check\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    _toSvgElement(element) {\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    _fetchIcon(iconConfig) {\n        const { url: safeUrl, options } = iconConfig;\n        const withCredentials = options?.withCredentials ?? false;\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        // TODO: add an ngDevMode check\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        // TODO: add an ngDevMode check\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(map(svg => {\n            // Security: This SVG is fetched from a SafeResourceUrl, and is thus\n            // trusted HTML.\n            return trustedHTMLFromString(svg);\n        }), finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n    /** Parses a config's text into an SVG element. */\n    _svgElementFromConfig(config) {\n        if (!config.svgElement) {\n            const svg = this._svgElementFromString(config.svgText);\n            this._setSvgAttributes(svg, config.options);\n            config.svgElement = svg;\n        }\n        return config.svgElement;\n    }\n    /** Tries to create an icon config through the registered resolver functions. */\n    _getIconConfigFromResolvers(namespace, name) {\n        for (let i = 0; i < this._resolvers.length; i++) {\n            const result = this._resolvers[i](name, namespace);\n            if (result) {\n                return isSafeUrlWithOptions(result)\n                    ? new SvgIconConfig(result.url, null, result.options)\n                    : new SvgIconConfig(result, null);\n            }\n        }\n        return undefined;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconRegistry, deps: [{ token: i1.HttpClient, optional: true }, { token: i2.DomSanitizer }, { token: DOCUMENT, optional: true }, { token: i0.ErrorHandler }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconRegistry, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient, decorators: [{\n                    type: Optional\n                }] }, { type: i2.DomSanitizer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.ErrorHandler }]; } });\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        ErrorHandler,\n        [new Optional(), DOCUMENT],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n    return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\nfunction isSafeUrlWithOptions(value) {\n    return !!(value.url && value.options);\n}\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nconst _MatIconBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n});\n/** Injection token to be used to override the default options for `mat-icon`. */\nconst MAT_ICON_DEFAULT_OPTIONS = new InjectionToken('MAT_ICON_DEFAULT_OPTIONS');\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY,\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => (_location ? _location.pathname + _location.search : ''),\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke',\n];\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the `fontIcon` attribute or the\n *   content of the `<mat-icon>` component. If you register a custom font class, don't forget to also\n *   include the special class `mat-ligature-font`. It is recommended to use the attribute alternative\n *   to prevent the ligature text to be selectable and to appear in search engine results.\n *   By default, the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon fontIcon=\"home\"></mat-icon>\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\" fontIcon=\"sun\"></mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconBase {\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    get inline() {\n        return this._inline;\n    }\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /** Name of the icon in the SVG icon set. */\n    get svgIcon() {\n        return this._svgIcon;\n    }\n    set svgIcon(value) {\n        if (value !== this._svgIcon) {\n            if (value) {\n                this._updateSvgIcon(value);\n            }\n            else if (this._svgIcon) {\n                this._clearSvgElement();\n            }\n            this._svgIcon = value;\n        }\n    }\n    /** Font set that the icon is a part of. */\n    get fontSet() {\n        return this._fontSet;\n    }\n    set fontSet(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontSet) {\n            this._fontSet = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /** Name of an icon within a font set. */\n    get fontIcon() {\n        return this._fontIcon;\n    }\n    set fontIcon(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontIcon) {\n            this._fontIcon = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler, defaults) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        this._previousFontSetClass = [];\n        /** Subscription to the current in-progress SVG icon request. */\n        this._currentIconFetch = Subscription.EMPTY;\n        if (defaults) {\n            if (defaults.color) {\n                this.color = this.defaultColor = defaults.color;\n            }\n            if (defaults.fontSet) {\n                this.fontSet = defaults.fontSet;\n            }\n        }\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1:\n                return ['', parts[0]]; // Use default namespace.\n            case 2:\n                return parts;\n            default:\n                throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        this._updateFontIconClasses();\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                child.remove();\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClasses = (this.fontSet\n            ? this._iconRegistry.classNameForFontAlias(this.fontSet).split(/ +/)\n            : this._iconRegistry.getDefaultFontSetClass()).filter(className => className.length > 0);\n        this._previousFontSetClass.forEach(className => elem.classList.remove(className));\n        fontSetClasses.forEach(className => elem.classList.add(className));\n        this._previousFontSetClass = fontSetClasses;\n        if (this.fontIcon !== this._previousFontIconClass &&\n            !fontSetClasses.includes('mat-ligature-font')) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = (this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map());\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n    /** Sets a new SVG icon with a particular name. */\n    _updateSvgIcon(rawName) {\n        this._svgNamespace = null;\n        this._svgName = null;\n        this._currentIconFetch.unsubscribe();\n        if (rawName) {\n            const [namespace, iconName] = this._splitIconName(rawName);\n            if (namespace) {\n                this._svgNamespace = namespace;\n            }\n            if (iconName) {\n                this._svgName = iconName;\n            }\n            this._currentIconFetch = this._iconRegistry\n                .getNamedSvgIcon(iconName, namespace)\n                .pipe(take(1))\n                .subscribe(svg => this._setSvgElement(svg), (err) => {\n                const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIcon, deps: [{ token: i0.ElementRef }, { token: MatIconRegistry }, { token: 'aria-hidden', attribute: true }, { token: MAT_ICON_LOCATION }, { token: i0.ErrorHandler }, { token: MAT_ICON_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatIcon, selector: \"mat-icon\", inputs: { color: \"color\", inline: \"inline\", svgIcon: \"svgIcon\", fontSet: \"fontSet\", fontIcon: \"fontIcon\" }, host: { attributes: { \"role\": \"img\" }, properties: { \"attr.data-mat-icon-type\": \"_usingFontIcon() ? \\\"font\\\" : \\\"svg\\\"\", \"attr.data-mat-icon-name\": \"_svgName || fontIcon\", \"attr.data-mat-icon-namespace\": \"_svgNamespace || fontSet\", \"attr.fontIcon\": \"_usingFontIcon() ? fontIcon : null\", \"class.mat-icon-inline\": \"inline\", \"class.mat-icon-no-color\": \"color !== \\\"primary\\\" && color !== \\\"accent\\\" && color !== \\\"warn\\\"\" }, classAttribute: \"mat-icon notranslate\" }, exportAs: [\"matIcon\"], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [\".mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIcon, decorators: [{\n            type: Component,\n            args: [{ template: '<ng-content></ng-content>', selector: 'mat-icon', exportAs: 'matIcon', inputs: ['color'], host: {\n                        'role': 'img',\n                        'class': 'mat-icon notranslate',\n                        '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                        '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                        '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                        '[attr.fontIcon]': '_usingFontIcon() ? fontIcon : null',\n                        '[class.mat-icon-inline]': 'inline',\n                        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: MatIconRegistry }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['aria-hidden']\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_ICON_LOCATION]\n                }] }, { type: i0.ErrorHandler }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_ICON_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { inline: [{\n                type: Input\n            }], svgIcon: [{\n                type: Input\n            }], fontSet: [{\n                type: Input\n            }], fontIcon: [{\n                type: Input\n            }] } });\n\nclass MatIconModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconModule, declarations: [MatIcon], imports: [MatCommonModule], exports: [MatIcon, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconModule, imports: [MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule],\n                    exports: [MatIcon, MatCommonModule],\n                    declarations: [MatIcon],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_DEFAULT_OPTIONS, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError };\n"],"names":["Observable","Subscription","EMPTY_SUBSCRIPTION","ObjectUnsubscribedError","arrRemove","errorContext","Subject","constructor","closed","currentObservers","observers","isStopped","hasError","thrownError","lift","operator","subject","AnonymousSubject","_throwIfClosed","next","value","Array","from","observer","error","err","length","shift","complete","unsubscribe","observed","_a","_trySubscribe","subscriber","_subscribe","_checkFinalizedStatuses","_innerSubscribe","push","asObservable","observable","source","create","destination","_b","call","subscribe","EMPTY","empty","scheduler","emptyScheduled","schedule","argsArgArrayOrObject","innerFrom","popResultSelector","createOperatorSubscriber","mapOneOrManyArgs","createObject","forkJoin","args","resultSelector","sources","keys","result","values","remainingCompletions","remainingEmissions","sourceIndex","hasValue","undefined","pipe","popScheduler","of","isFunction","throwError","errorOrErrorFactory","errorFactory","init","Subscriber","onNext","onComplete","onError","onFinalize","OperatorSubscriber","shouldUnsubscribe","_next","_error","_complete","operate","catchError","selector","innerSub","syncUnsub","handledResult","finalize","callback","add","map","project","thisArg","index","SafeSubscriber","share","options","connector","resetOnError","resetOnComplete","resetOnRefCountZero","wrapperSource","connection","resetConnection","refCount","hasCompleted","hasErrored","cancelReset","reset","resetAndUnsubscribe","conn","dest","handleReset","on","onSubscriber","take","count","seen","identity","tap","observerOrNext","tapObserver","isUnsub","createErrorClass","_super","ObjectUnsubscribedErrorImpl","name","message","isArray","getPrototypeOf","prototype","objectProto","getKeys","Object","first","isPOJO","key","obj","reduce","i","hasLift","liftedSource","TypeError","callOrApply","fn","i0","SecurityContext","Injectable","Optional","Inject","SkipSelf","ErrorHandler","InjectionToken","inject","Component","ViewEncapsulation","ChangeDetectionStrategy","Attribute","Input","NgModule","mixinColor","MatCommonModule","coerceBooleanProperty","DOCUMENT","i1","HttpClient","i2","DomSanitizer","_c0","policy","getPolicy","window","ttWindow","trustedTypes","createPolicy","createHTML","s","trustedHTMLFromString","html","getMatIconNameNotFoundError","iconName","Error","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeUrlError","url","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","svgText","MatIconRegistry","_httpClient","_sanitizer","document","_errorHandler","_svgIconConfigs","Map","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_resolvers","_defaultFontSetClass","_document","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","addSvgIconResolver","resolver","cleanLiteral","sanitize","HTML","trustedLiteral","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","registerFontClassAlias","alias","classNames","set","classNameForFontAlias","get","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","cachedIcon","cloneSvg","_loadSvgIconFromConfig","svg","getNamedSvgIcon","iconKey","config","_getSvgFromConfig","_getIconConfigFromResolvers","iconSetConfigs","_getSvgFromIconSetConfigs","ngOnDestroy","clear","_svgElementFromConfig","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","filter","iconSetConfig","_loadSvgIconSetFromConfig","errorMessage","handleError","foundIcon","toString","indexOf","_extractSvgIconFromSet","_fetchIcon","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","nodeName","toLowerCase","_setSvgAttributes","_toSvgElement","_svgElementFromString","appendChild","str","div","createElement","innerHTML","element","attributes","setAttribute","childNodes","nodeType","ELEMENT_NODE","viewBox","iconConfig","withCredentials","inProgressFetch","req","responseType","delete","configNamespace","svgElement","isSafeUrlWithOptions","_","ɵfac","MatIconRegistry_Factory","t","ɵɵinject","_2","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","decorators","ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","httpClient","sanitizer","errorHandler","ICON_REGISTRY_PROVIDER","provide","deps","useFactory","_MatIconBase","_elementRef","MAT_ICON_DEFAULT_OPTIONS","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","_location","location","getPathname","pathname","search","funcIriAttributes","funcIriAttributeSelector","attr","join","funcIriPattern","MatIcon","inline","_inline","svgIcon","_svgIcon","_updateSvgIcon","_clearSvgElement","fontSet","_fontSet","newValue","_cleanupFontValue","_updateFontIconClasses","fontIcon","_fontIcon","elementRef","_iconRegistry","ariaHidden","defaults","_previousFontSetClass","_currentIconFetch","color","defaultColor","nativeElement","_splitIconName","parts","split","ngOnInit","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","_usingFontIcon","_setSvgElement","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","remove","elem","fontSetClasses","className","forEach","classList","_previousFontIconClass","includes","trim","elements","attrs","elementsWithFuncIri","querySelectorAll","elementWithReference","getAttribute","match","rawName","_svgNamespace","_svgName","MatIcon_Factory","ɵɵdirectiveInject","ElementRef","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","selectors","hostAttrs","hostVars","hostBindings","MatIcon_HostBindings","rf","ctx","ɵɵattribute","ɵɵclassProp","inputs","exportAs","features","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","template","MatIcon_Template","ɵɵprojectionDef","ɵɵprojection","styles","encapsulation","changeDetection","host","None","OnPush","MatIconModule","MatIconModule_Factory","ɵmod","ɵɵdefineNgModule","_3","ɵinj","ɵɵdefineInjector","imports","exports","declarations"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]}