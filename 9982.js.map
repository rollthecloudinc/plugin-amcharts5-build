{"version":3,"file":"9982.js","mappings":"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","sources":["./node_modules/rxjs/dist/esm/internal/observable/concat.js","./node_modules/rxjs/dist/esm/internal/observable/empty.js","./node_modules/rxjs/dist/esm/internal/observable/interval.js","./node_modules/rxjs/dist/esm/internal/observable/merge.js","./node_modules/rxjs/dist/esm/internal/operators/OperatorSubscriber.js","./node_modules/rxjs/dist/esm/internal/operators/concatAll.js","./node_modules/rxjs/dist/esm/internal/operators/map.js","./node_modules/rxjs/dist/esm/internal/operators/mergeAll.js","./node_modules/rxjs/dist/esm/internal/operators/startWith.js","./node_modules/rxjs/dist/esm/internal/operators/switchMap.js","./node_modules/rxjs/dist/esm/internal/operators/take.js","./node_modules/rxjs/dist/esm/internal/operators/takeUntil.js","./node_modules/rxjs/dist/esm/internal/operators/tap.js","./node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameAction.js","./node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameScheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/animationFrame.js","./node_modules/rxjs/dist/esm/internal/scheduler/animationFrameProvider.js","./node_modules/rxjs/dist/esm/internal/util/lift.js","./node_modules/@angular/cdk/fesm2022/drag-drop.mjs"],"sourcesContent":["import { concatAll } from '../operators/concatAll';\nimport { popScheduler } from '../util/args';\nimport { from } from './from';\nexport function concat(...args) {\n    return concatAll()(from(args, popScheduler(args)));\n}\n","import { Observable } from '../Observable';\nexport const EMPTY = new Observable((subscriber) => subscriber.complete());\nexport function empty(scheduler) {\n    return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\nfunction emptyScheduled(scheduler) {\n    return new Observable((subscriber) => scheduler.schedule(() => subscriber.complete()));\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { timer } from './timer';\nexport function interval(period = 0, scheduler = asyncScheduler) {\n    if (period < 0) {\n        period = 0;\n    }\n    return timer(period, period, scheduler);\n}\n","import { mergeAll } from '../operators/mergeAll';\nimport { innerFrom } from './innerFrom';\nimport { EMPTY } from './empty';\nimport { popNumber, popScheduler } from '../util/args';\nimport { from } from './from';\nexport function merge(...args) {\n    const scheduler = popScheduler(args);\n    const concurrent = popNumber(args, Infinity);\n    const sources = args;\n    return !sources.length\n        ?\n            EMPTY\n        : sources.length === 1\n            ?\n                innerFrom(sources[0])\n            :\n                mergeAll(concurrent)(from(sources, scheduler));\n}\n","import { Subscriber } from '../Subscriber';\nexport function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {\n    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);\n}\nexport class OperatorSubscriber extends Subscriber {\n    constructor(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {\n        super(destination);\n        this.onFinalize = onFinalize;\n        this.shouldUnsubscribe = shouldUnsubscribe;\n        this._next = onNext\n            ? function (value) {\n                try {\n                    onNext(value);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n            }\n            : super._next;\n        this._error = onError\n            ? function (err) {\n                try {\n                    onError(err);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : super._error;\n        this._complete = onComplete\n            ? function () {\n                try {\n                    onComplete();\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : super._complete;\n    }\n    unsubscribe() {\n        var _a;\n        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n            const { closed } = this;\n            super.unsubscribe();\n            !closed && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));\n        }\n    }\n}\n","import { mergeAll } from './mergeAll';\nexport function concatAll() {\n    return mergeAll(1);\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function map(project, thisArg) {\n    return operate((source, subscriber) => {\n        let index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            subscriber.next(project.call(thisArg, value, index++));\n        }));\n    });\n}\n","import { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nexport function mergeAll(concurrent = Infinity) {\n    return mergeMap(identity, concurrent);\n}\n","import { concat } from '../observable/concat';\nimport { popScheduler } from '../util/args';\nimport { operate } from '../util/lift';\nexport function startWith(...values) {\n    const scheduler = popScheduler(values);\n    return operate((source, subscriber) => {\n        (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);\n    });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function switchMap(project, resultSelector) {\n    return operate((source, subscriber) => {\n        let innerSubscriber = null;\n        let index = 0;\n        let isComplete = false;\n        const checkComplete = () => isComplete && !innerSubscriber && subscriber.complete();\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();\n            let innerIndex = 0;\n            const outerIndex = index++;\n            innerFrom(project(value, outerIndex)).subscribe((innerSubscriber = createOperatorSubscriber(subscriber, (innerValue) => subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue), () => {\n                innerSubscriber = null;\n                checkComplete();\n            })));\n        }, () => {\n            isComplete = true;\n            checkComplete();\n        }));\n    });\n}\n","import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function take(count) {\n    return count <= 0\n        ?\n            () => EMPTY\n        : operate((source, subscriber) => {\n            let seen = 0;\n            source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n                if (++seen <= count) {\n                    subscriber.next(value);\n                    if (count <= seen) {\n                        subscriber.complete();\n                    }\n                }\n            }));\n        });\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { noop } from '../util/noop';\nexport function takeUntil(notifier) {\n    return operate((source, subscriber) => {\n        innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, () => subscriber.complete(), noop));\n        !subscriber.closed && source.subscribe(subscriber);\n    });\n}\n","import { isFunction } from '../util/isFunction';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nexport function tap(observerOrNext, error, complete) {\n    const tapObserver = isFunction(observerOrNext) || error || complete\n        ?\n            { next: observerOrNext, error, complete }\n        : observerOrNext;\n    return tapObserver\n        ? operate((source, subscriber) => {\n            var _a;\n            (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n            let isUnsub = true;\n            source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n                var _a;\n                (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);\n                subscriber.next(value);\n            }, () => {\n                var _a;\n                isUnsub = false;\n                (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n                subscriber.complete();\n            }, (err) => {\n                var _a;\n                isUnsub = false;\n                (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);\n                subscriber.error(err);\n            }, () => {\n                var _a, _b;\n                if (isUnsub) {\n                    (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n                }\n                (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);\n            }));\n        })\n        :\n            identity;\n}\n","import { AsyncAction } from './AsyncAction';\nimport { animationFrameProvider } from './animationFrameProvider';\nexport class AnimationFrameAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(() => scheduler.flush(undefined)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        var _a;\n        if (delay != null ? delay > 0 : this.delay > 0) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        const { actions } = scheduler;\n        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {\n            animationFrameProvider.cancelAnimationFrame(id);\n            scheduler._scheduled = undefined;\n        }\n        return undefined;\n    }\n}\n","import { AsyncScheduler } from './AsyncScheduler';\nexport class AnimationFrameScheduler extends AsyncScheduler {\n    flush(action) {\n        this._active = true;\n        const flushId = this._scheduled;\n        this._scheduled = undefined;\n        const { actions } = this;\n        let error;\n        action = action || actions.shift();\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions[0]) && action.id === flushId && actions.shift());\n        this._active = false;\n        if (error) {\n            while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nexport const animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);\nexport const animationFrame = animationFrameScheduler;\n","import { Subscription } from '../Subscription';\nexport const animationFrameProvider = {\n    schedule(callback) {\n        let request = requestAnimationFrame;\n        let cancel = cancelAnimationFrame;\n        const { delegate } = animationFrameProvider;\n        if (delegate) {\n            request = delegate.requestAnimationFrame;\n            cancel = delegate.cancelAnimationFrame;\n        }\n        const handle = request((timestamp) => {\n            cancel = undefined;\n            callback(timestamp);\n        });\n        return new Subscription(() => cancel === null || cancel === void 0 ? void 0 : cancel(handle));\n    },\n    requestAnimationFrame(...args) {\n        const { delegate } = animationFrameProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame)(...args);\n    },\n    cancelAnimationFrame(...args) {\n        const { delegate } = animationFrameProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame)(...args);\n    },\n    delegate: undefined,\n};\n","import { isFunction } from './isFunction';\nexport function hasLift(source) {\n    return isFunction(source === null || source === void 0 ? void 0 : source.lift);\n}\nexport function operate(init) {\n    return (source) => {\n        if (hasLift(source)) {\n            return source.lift(function (liftedSource) {\n                try {\n                    return init(liftedSource, this);\n                }\n                catch (err) {\n                    this.error(err);\n                }\n            });\n        }\n        throw new TypeError('Unable to lift unknown Observable type');\n    };\n}\n","import * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, Directive, Optional, SkipSelf, Input, EventEmitter, Self, ContentChildren, ContentChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, map, take, startWith, tap, switchMap } from 'rxjs/operators';\nimport * as i1$1 from '@angular/cdk/bidi';\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height,\n        x: clientRect.x,\n        y: clientRect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document) {\n        this._document = _document;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n    /**\n     * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n     * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n     * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n     * if the element is offset by something like the `BlockScrollStrategy`.\n     */\n    getViewportScrollPosition() {\n        return { top: window.scrollY, left: window.scrollX };\n    }\n}\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch { }\n    }\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n        }\n    }\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Whether the dragging sequence has been started. Doesn't\n         * necessarily mean that the element has been moved.\n         */\n        this._hasStartedDragging = false;\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        event.preventDefault();\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            event.preventDefault();\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                // If there's a position constraint function, we want the element's top/left to be at the\n                // specific position on the page. Use the initial position as a reference if that's the case.\n                const offset = this.constrainPosition ? this._initialClientRect : this._pickupPositionOnPage;\n                const activeTransform = this._activeTransform;\n                activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n                activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta,\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        /** Handles a native `dragstart` event. */\n        this._nativeDragStart = (event) => {\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    event.preventDefault();\n                }\n            }\n            else if (!this.disabled) {\n                // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n                // but some cases like dragging of links can slip through (see #24403).\n                event.preventDefault();\n            }\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n                element.addEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            this._rootElement?.remove();\n        }\n        this._anchor?.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._anchor =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        this._preview?.remove();\n        this._previewRef?.destroy();\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        this._placeholder?.remove();\n        this._placeholderRef?.destroy();\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor =\n                this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this, event });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                    event,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const anchor = (this._anchor = this._anchor || this._document.createComment(''));\n            // Needs to happen before the root element is moved.\n            const shadowRoot = this._getShadowRoot();\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = this._createPreviewElement();\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);\n            this.started.next({ source: this, event }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this, event });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._initialClientRect = this._rootElement.getBoundingClientRect();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(this._initialClientRect, referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._initialClientRect =\n            this._boundaryRect =\n                this._previewRect =\n                    this._initialTransform =\n                        undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition, event });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n                event,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            if (this.constrainPosition) {\n                this._applyPreviewTransform(x, y);\n            }\n            else {\n                this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n            }\n        }\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._initialClientRect : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            preview = deepCloneNode(this._rootElement);\n            matchElementSize(preview, this._initialClientRect);\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            'margin': '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': `${this._config.zIndex || 1000}`,\n        }, dragImportantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event ||\n                        (_getEventTarget(event) === this._preview && event.propertyName === 'transform')) {\n                        this._preview?.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        // Stop pointer events on the preview so the user can't\n        // interact with it while the preview is animating.\n        placeholder.style.pointerEvents = 'none';\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(elementRect, referenceElement, event) {\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition\n            ? this.constrainPosition(point, this, this._initialClientRect, this._pickupPositionInElement)\n            : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            const boundaryRect = this._boundaryRect;\n            const { width: previewWidth, height: previewHeight } = this._getPreviewRect();\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewWidth - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        element.removeEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.style.transform = combineTransforms(transform, initialTransform);\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // ClientRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary ClientRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        return (this._parentPositions.positions.get(this._document)?.scrollPosition ||\n            this._parentPositions.getViewportScrollPosition());\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n    /** Lazily resolves and returns the dimensions of the preview. */\n    _getPreviewRect() {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n            this._previewRect = this._preview\n                ? this._preview.getBoundingClientRect()\n                : this._initialClientRect;\n        }\n        return this._previewRect;\n    }\n    /** Gets a handle that is the target of an event. */\n    _getTargetHandle(event) {\n        return this._handles.find(handle => {\n            return event.target && (event.target === handle || handle.contains(event.target));\n        });\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nclass SingleAxisSortStrategy {\n    constructor(_element, _dragDropRegistry) {\n        this._element = _element;\n        this._dragDropRegistry = _dragDropRegistry;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /** Direction in which the list is oriented. */\n        this.orientation = 'vertical';\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = {\n            drag: null,\n            delta: 0,\n            overlaps: false,\n        };\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return null;\n        }\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        return { previousIndex: currentIndex, currentIndex: newIndex };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        const newIndex = index == null || index < 0\n            ? // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // If we didn't find a new position reference, it means that either the item didn't start off\n        // in this container, or that the item requested to be inserted at the end of the list.\n        if (!newPositionReference &&\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            newPositionReference = activeDraggables[0];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            coerceElement(this._element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that usually `start` is called together with `enter` when an item goes into a new\n        // container. This will cache item positions, but we need to refresh them since the amount\n        // of items has changed.\n        this._cacheItemPositions();\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeDraggables = items.slice();\n        this._cacheItemPositions();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._itemPositions = [];\n        this._activeDraggables = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeDraggables;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this.orientation === 'horizontal' && this.direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n        return items.findIndex(currentItem => currentItem.drag === item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll(topDifference, leftDifference) {\n        // Since we know the amount that the user has scrolled we can shift all of the\n        // client rectangles ourselves. This is cheaper than re-measuring everything and\n        // we can avoid inconsistent behavior where we might be measuring the element before\n        // its position has changed.\n        this._itemPositions.forEach(({ clientRect }) => {\n            adjustClientRect(clientRect, topDifference, leftDifference);\n        });\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach(({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        });\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this.orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this.orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n}\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Function that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Emits when a dragging sequence is started in a list connected to the current one. */\n        this.receivingStarted = new Subject();\n        /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n        this.receivingStopped = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === 1 /* AutoScrollVerticalDirection.UP */) {\n                    node.scrollBy(0, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === 2 /* AutoScrollVerticalDirection.DOWN */) {\n                    node.scrollBy(0, scrollStep);\n                }\n                if (this._horizontalScrollDirection === 1 /* AutoScrollHorizontalDirection.LEFT */) {\n                    node.scrollBy(-scrollStep, 0);\n                }\n                else if (this._horizontalScrollDirection === 2 /* AutoScrollHorizontalDirection.RIGHT */) {\n                    node.scrollBy(scrollStep, 0);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document);\n        this._sortStrategy = new SingleAxisSortStrategy(this.element, _dragDropRegistry);\n        this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this.receivingStarted.complete();\n        this.receivingStopped.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Attempts to move an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        if (index == null && this.sortingDisabled) {\n            index = this._draggables.indexOf(item);\n        }\n        this._sortStrategy.enter(item, pointerX, pointerY, index);\n        // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n        // can change when the sort strategy moves the item around inside `enter`.\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param event Event that triggered the dropping sequence.\n     *\n     * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n            event,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._sortStrategy.withItems(this._draggables);\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._sortStrategy.direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        // TODO(crisbeto): eventually we should be constructing the new sort strategy here based on\n        // the new orientation. For now we can assume that it'll always be `SingleAxisSortStrategy`.\n        this._sortStrategy.orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        return this._isDragging\n            ? this._sortStrategy.getItemIndex(item)\n            : this._draggables.indexOf(item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._clientRect ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n        if (result) {\n            this.sorted.next({\n                previousIndex: result.previousIndex,\n                currentIndex: result.currentIndex,\n                container: this,\n                item,\n            });\n        }\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n        let horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._sortStrategy.start(this._draggables);\n        this._cacheParentPositions();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._sortStrategy.reset();\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._clientRect ||\n            !isInsideClientRect(this._clientRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n            this.receivingStarted.next({\n                initiator: sibling,\n                receiver: this,\n                items,\n            });\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n        this.receivingStopped.next({ initiator: sibling, receiver: this });\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = (shadowRoot || this._document);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._sortStrategy\n            .getActiveItemsSnapshot()\n            .filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* AutoScrollVerticalDirection.UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* AutoScrollVerticalDirection.DOWN */;\n    }\n    return 0 /* AutoScrollVerticalDirection.NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* AutoScrollHorizontalDirection.LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* AutoScrollHorizontalDirection.RIGHT */;\n    }\n    return 0 /* AutoScrollHorizontalDirection.NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n    let horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* AutoScrollVerticalDirection.UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* AutoScrollVerticalDirection.UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* AutoScrollVerticalDirection.DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* AutoScrollHorizontalDirection.LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* AutoScrollHorizontalDirection.LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* AutoScrollHorizontalDirection.RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = [];\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n         * @breaking-change 13.0.0\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n            return;\n        }\n        this._activeDragInstances.push(drag);\n        if (this._activeDragInstances.length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true,\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true,\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions,\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions,\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        const index = this._activeDragInstances.indexOf(drag);\n        if (index > -1) {\n            this._activeDragInstances.splice(index, 1);\n            if (this._activeDragInstances.length === 0) {\n                this._clearGlobalListeners();\n            }\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const eventOptions = true;\n                    const callback = (event) => {\n                        if (this._activeDragInstances.length) {\n                            observer.next(event);\n                        }\n                    };\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\n                    return () => {\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropRegistry, deps: [{ token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDrop, deps: [{ token: DOCUMENT }, { token: i0.NgZone }, { token: i1.ViewportRuler }, { token: DragDropRegistry }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDrop, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i1.ViewportRuler }, { type: DragDropRegistry }]; } });\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag = parentDrag;\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDragHandle, deps: [{ token: i0.ElementRef }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkDragHandle, isStandalone: true, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }]; }, propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkDragHandleDisabled']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDragPlaceholder, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkDragPlaceholder, isStandalone: true, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\n                type: Input\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() {\n        return this._matchSize;\n    }\n    set matchSize(value) {\n        this._matchSize = coerceBooleanProperty(value);\n    }\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDragPreview, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkDragPreview, isStandalone: true, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: \"matchSize\" }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input\n            }] } });\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    static { this._dragInstances = []; }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved\n                .pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance,\n            })))\n                .subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config?.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._dragRef.setFreeDragPosition(value);\n    }\n    ngAfterViewInit() {\n        // Normally this isn't in the zone, but it can cause major performance regressions for apps\n        // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.\n        this._ngZone.runOutsideAngular(() => {\n            // We need to wait for the zone to stabilize, in order for the reference\n            // element to be in the proper place in the DOM. This is mostly relevant\n            // for draggable elements inside portals since they get stamped out in\n            // their original DOM position and then they get transferred to the portal.\n            this._ngZone.onStable.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                this._updateRootElement();\n                this._setupHandlesListener();\n                if (this.freeDragPosition) {\n                    this._dragRef.setFreeDragPosition(this.freeDragPosition);\n                }\n            });\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        element.parentElement?.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                if (parent.classList.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })?._dragRef || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(startEvent => {\n            this.started.emit({ source: this, event: startEvent.event });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(releaseEvent => {\n            this.released.emit({ source: this, event: releaseEvent.event });\n        });\n        ref.ended.subscribe(endEvent => {\n            this.ended.emit({\n                source: this,\n                distance: endEvent.distance,\n                dropPoint: endEvent.dropPoint,\n                event: endEvent.event,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(enterEvent => {\n            this.entered.emit({\n                container: enterEvent.container.data,\n                item: this,\n                currentIndex: enterEvent.currentIndex,\n            });\n        });\n        ref.exited.subscribe(exitEvent => {\n            this.exited.emit({\n                container: exitEvent.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                item: this,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles.changes\n            .pipe(startWith(this._handles), \n        // Sync the new handles with the DragRef.\n        tap((handles) => {\n            const childHandleElements = handles\n                .filter(handle => handle._parentDrag === this)\n                .map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                childHandleElements.push(this.element);\n            }\n            this._dragRef.withHandles(childHandleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => {\n                return item._stateChanges.pipe(startWith(item));\n            }));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDrag, deps: [{ token: i0.ElementRef }, { token: CDK_DROP_LIST, optional: true, skipSelf: true }, { token: DOCUMENT }, { token: i0.NgZone }, { token: i0.ViewContainerRef }, { token: CDK_DRAG_CONFIG, optional: true }, { token: i1$1.Directionality, optional: true }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: CDK_DRAG_HANDLE, optional: true, self: true }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkDrag, isStandalone: true, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], queries: [{ propertyName: \"_previewTemplate\", first: true, predicate: CDK_DRAG_PREVIEW, descendants: true }, { propertyName: \"_placeholderTemplate\", first: true, predicate: CDK_DRAG_PLACEHOLDER, descendants: true }, { propertyName: \"_handles\", predicate: CDK_DRAG_HANDLE, descendants: true }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    standalone: true,\n                    host: {\n                        'class': DRAG_HOST_CLASS,\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DROP_LIST]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_HANDLE]\n                }] }, { type: CdkDrag, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }] }]; }, propDecorators: { _handles: [{\n                type: ContentChildren,\n                args: [CDK_DRAG_HANDLE, { descendants: true }]\n            }], _previewTemplate: [{\n                type: ContentChild,\n                args: [CDK_DRAG_PREVIEW]\n            }], _placeholderTemplate: [{\n                type: ContentChild,\n                args: [CDK_DRAG_PLACEHOLDER]\n            }], data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkDragDisabled']\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkDropListGroup, isStandalone: true, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    standalone: true,\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkDropListGroupDisabled']\n            }] } });\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    /** Keeps track of the drop lists that are currently on the page. */\n    static { this._dropLists = []; }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                item: dropEvent.item.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n        merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDropList, deps: [{ token: i0.ElementRef }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: i1.ScrollDispatcher }, { token: i1$1.Directionality, optional: true }, { token: CDK_DROP_LIST_GROUP, optional: true, skipSelf: true }, { token: CDK_DRAG_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkDropList, isStandalone: true, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ], exportAs: [\"cdkDropList\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    standalone: true,\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: i1.ScrollDispatcher }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: CdkDropListGroup, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DROP_LIST_GROUP]\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }]; }, propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkDropListDisabled']\n            }], sortingDisabled: [{\n                type: Input,\n                args: ['cdkDropListSortingDisabled']\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollDisabled']\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\nconst DRAG_DROP_DIRECTIVES = [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n];\nclass DragDropModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropModule, imports: [CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder], exports: [CdkScrollableModule, CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: DRAG_DROP_DIRECTIVES,\n                    exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n                    providers: [DragDrop],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n"],"names":["concatAll","popScheduler","from","concat","args","Observable","EMPTY","subscriber","complete","empty","scheduler","emptyScheduled","schedule","asyncScheduler","timer","interval","period","mergeAll","innerFrom","popNumber","merge","concurrent","Infinity","sources","length","Subscriber","createOperatorSubscriber","destination","onNext","onComplete","onError","onFinalize","OperatorSubscriber","constructor","shouldUnsubscribe","_next","value","err","error","_error","unsubscribe","_complete","_a","closed","call","operate","map","project","thisArg","source","index","subscribe","next","mergeMap","identity","startWith","values","switchMap","resultSelector","innerSubscriber","isComplete","checkComplete","innerIndex","outerIndex","innerValue","take","count","seen","noop","takeUntil","notifier","isFunction","tap","observerOrNext","tapObserver","isUnsub","_b","finalize","AsyncAction","animationFrameProvider","AnimationFrameAction","work","requestAsyncId","id","delay","actions","push","_scheduled","requestAnimationFrame","flush","undefined","recycleAsyncId","cancelAnimationFrame","AsyncScheduler","AnimationFrameScheduler","action","_active","flushId","shift","execute","state","animationFrameScheduler","animationFrame","Subscription","callback","request","cancel","delegate","handle","timestamp","hasLift","lift","init","liftedSource","TypeError","i0","Injectable","Inject","InjectionToken","Directive","Optional","SkipSelf","Input","EventEmitter","Self","ContentChildren","ContentChild","Output","NgModule","DOCUMENT","i1","CdkScrollableModule","_getEventTarget","normalizePassiveListenerOptions","_getShadowRoot","coerceBooleanProperty","coerceElement","coerceNumberProperty","coerceArray","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","Subject","i1$1","extendStyles","dest","importantProperties","key","hasOwnProperty","setProperty","has","removeProperty","toggleNativeDragInteractions","element","enable","userSelect","style","toggleVisibility","position","top","opacity","left","combineTransforms","transform","initialTransform","parseCssTimeUnitsToMs","multiplier","toLowerCase","indexOf","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","part","trim","getMutableClientRect","clientRect","getBoundingClientRect","right","bottom","width","height","x","y","isInsideClientRect","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","_document","positions","Map","clear","cache","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","handleScroll","event","target","cachedPosition","get","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","node","contains","window","scrollY","scrollX","deepCloneNode","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","i","transferCanvasData","transferInputData","transferData","selector","descendantElements","cloneElements","cloneUniqueId","type","context","getContext","drawImage","passiveEventListenerOptions","passive","activeEventListenerOptions","MOUSE_EVENT_IGNORE_TIME","dragImportantProperties","Set","DragRef","disabled","_disabled","_dropContainer","newValue","_toggleNativeDragInteractions","_handles","_config","_ngZone","_viewportRuler","_dragDropRegistry","_passiveTransform","_activeTransform","_hasStartedDragging","_moveEvents","_pointerMoveSubscription","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_disabledHandles","_direction","dragStartDelay","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","targetHandle","_getTargetHandle","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getPointerPositionOnPage","distanceX","Math","abs","_pickupPositionOnPage","distanceY","isOverThreshold","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","container","_endDragSequence","isDragging","isReceiving","preventDefault","run","_startDragSequence","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","offset","constrainPosition","_initialClientRect","activeTransform","_applyRootElementTransform","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","_nativeDragStart","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","getPlaceholderElement","_placeholder","getRootElement","getVisibleElement","withHandles","handles","disabledHandles","add","withPreviewTemplate","template","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","SVGElement","_ownerSVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","change","_containInsideBoundaryOnResize","parent","_parentDragRef","dispose","remove","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","reset","disableHandle","enableHandle","delete","withDirection","direction","_withDropContainer","getFreeDragPosition","setFreeDragPosition","withPreviewContainer","_previewContainer","_sortFromLastPointerPosition","_preview","_previewRef","destroy","_placeholderRef","stopDragging","webkitTapHighlightColor","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","_lastTouchEventTime","dropContainer","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","shadowRoot","insertBefore","_createPreviewElement","body","appendChild","replaceChild","_getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","_previewRect","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","previewConfig","previewClass","preview","rootRect","viewRef","viewContainer","createEmbeddedView","detectChanges","getRootNode","matchElementSize","getTransform","zIndex","classList","setAttribute","Array","isArray","className","Promise","resolve","placeholderRect","duration","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","pointerEvents","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewWidth","previewHeight","_getPreviewRect","minY","maxY","minX","maxX","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","styles","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","scrollDifference","_cachedShadowRoot","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","round","min","max","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","moveItemInArray","array","fromIndex","toIndex","clamp","to","transferArrayItem","currentArray","targetArray","targetIndex","splice","copyArrayItem","SingleAxisSortStrategy","_element","_itemPositions","orientation","_previousSwap","drag","overlaps","items","withItems","sort","pointerDelta","siblings","newIndex","_getItemIndexFromPointerPosition","isHorizontal","findIndex","currentItem","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","slice","sibling","isDraggedItem","elementToOffset","activeDraggables","_activeDraggables","newPositionReference","_shouldEnterAsFirstChild","parentElement","_cacheItemPositions","withSortPredicate","predicate","_sortPredicate","p","getActiveItemsSnapshot","reverse","updateOnScroll","elementToMeasure","a","b","immediateSibling","end","itemPositions","reversed","lastItemRect","firstItemRect","floor","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","receivingStarted","receivingStopped","_isDragging","_draggables","_siblings","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_startScrollInterval","pipe","_scrollNode","scrollStep","scrollBy","withScrollableParents","registerDropContainer","_sortStrategy","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","_cacheParentPositions","_reset","previousItems","draggedItems","filter","every","connectedTo","withOrientation","_scrollableElements","size","_clientRect","result","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","getViewportSize","getVerticalScrollDirection","getHorizontalScrollDirection","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","_stopReceiving","_canReceive","elementFromPoint","nativeElement","_startReceiving","activeSiblings","initiator","receiver","computedVertical","computedHorizontal","scrollHeight","clientHeight","scrollWidth","clientWidth","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","scroll","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","startsWith","e","options","config","_clearGlobalListeners","streams","observer","eventOptions","ngOnDestroy","instance","_","ɵfac","DragDropRegistry_Factory","t","ɵɵinject","NgZone","_2","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","decorators","DEFAULT_CONFIG","DragDrop","createDrag","createDropList","DragDrop_Factory","ViewportRuler","CDK_DRAG_PARENT","assertElementNode","Error","CDK_DRAG_HANDLE","CdkDragHandle","_stateChanges","parentDrag","_parentDrag","CdkDragHandle_Factory","ɵɵdirectiveInject","ElementRef","ɵdir","ɵɵdefineDirective","selectors","hostAttrs","inputs","standalone","features","ɵɵProvidersFeature","provide","useExisting","host","providers","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","templateRef","CdkDragPlaceholder_Factory","TemplateRef","data","CDK_DRAG_PREVIEW","CdkDragPreview","_matchSize","CdkDragPreview_Factory","CDK_DRAG_CONFIG","DRAG_HOST_CLASS","CDK_DROP_LIST","CdkDrag","_dragRef","_viewContainerRef","_dir","dragDrop","_changeDetectorRef","_selfHandle","_destroyed","subscription","movedEvent","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","ngAfterViewInit","onStable","_updateRootElement","_setupHandlesListener","freeDragPosition","ngOnChanges","changes","rootSelectorChange","positionChange","firstChange","removeItem","rootElementSelector","closest","_getBoundaryElement","boundary","ref","dir","startEvent","emit","markForCheck","releaseEvent","endEvent","enterEvent","exitEvent","dropEvent","draggingDisabled","childHandleElements","handleInstance","dragRef","CdkDrag_Factory","ViewContainerRef","Directionality","ChangeDetectorRef","_3","contentQueries","CdkDrag_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostVars","hostBindings","CdkDrag_HostBindings","ɵɵclassProp","outputs","exportAs","ɵɵNgOnChangesFeature","descendants","CDK_DROP_LIST_GROUP","CdkDropListGroup","_items","CdkDropListGroup_Factory","_uniqueIdCounter","CdkDropList","_dropLists","_group","_scrollDispatcher","_unsortedItems","_setupInputSyncSubscription","_syncItemsWithRef","getSortedItems","documentPosition","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","correspondingDropList","list","console","warn","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","listAutoScrollDisabled","listOrientation","CdkDropList_Factory","ScrollDispatcher","CdkDropList_HostBindings","ɵɵattribute","useValue","DRAG_DROP_DIRECTIVES","DragDropModule","DragDropModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]}